// <auto-generated />
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Disc.Infrastructure.Migrations
{
    [DbContext(typeof(DiscAppContext))]
    [Migration("20230815145214_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Disc.Domain.Entities.Artist", b =>
                {
                    b.Property<long>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ArtistId"));

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.HasIndex("CountryId");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("Disc.Domain.Entities.ArtistLink", b =>
                {
                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("LinkId")
                        .HasColumnType("bigint");

                    b.HasKey("ArtistId", "LinkId");

                    b.HasIndex("LinkId");

                    b.ToTable("ArtistLink");
                });

            modelBuilder.Entity("Disc.Domain.Entities.ArtistMusicLabel", b =>
                {
                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("MusicLabelId")
                        .HasColumnType("bigint");

                    b.HasKey("ArtistId", "MusicLabelId");

                    b.HasIndex("MusicLabelId");

                    b.ToTable("ArtistMusicLabel");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Condition", b =>
                {
                    b.Property<long>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ConditionId"));

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionId");

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Genre", b =>
                {
                    b.Property<long>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Link", b =>
                {
                    b.Property<long>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LinkId"));

                    b.Property<long?>("MusicLabelLabelId")
                        .HasColumnType("bigint");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LinkId");

                    b.HasIndex("MusicLabelLabelId");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("Disc.Domain.Entities.MusicLabel", b =>
                {
                    b.Property<long>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LabelId"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabelId");

                    b.HasIndex("CountryId");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Release", b =>
                {
                    b.Property<long>("DiscogsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DiscogsId"));

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ConditionId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("DiscogsId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Release");
                });

            modelBuilder.Entity("Disc.Domain.Entities.ReleaseGenre", b =>
                {
                    b.Property<long>("ReleaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.HasKey("ReleaseId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("ReleaseGenre");
                });

            modelBuilder.Entity("Disc.Domain.Entities.ReleaseStyle", b =>
                {
                    b.Property<long>("ReleaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("StyleId")
                        .HasColumnType("bigint");

                    b.HasKey("ReleaseId", "StyleId");

                    b.HasIndex("StyleId");

                    b.ToTable("ReleaseStyle");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Style", b =>
                {
                    b.Property<long>("StyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StyleId"));

                    b.Property<string>("StyleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StyleId");

                    b.ToTable("Style");
                });

            modelBuilder.Entity("Disc.Domain.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Artist", b =>
                {
                    b.HasOne("Disc.Domain.Entities.Country", "Country")
                        .WithMany("Artists")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Disc.Domain.Entities.ArtistLink", b =>
                {
                    b.HasOne("Disc.Domain.Entities.Artist", "Artist")
                        .WithMany("Links")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Disc.Domain.Entities.Link", "Link")
                        .WithMany("Artist")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("Disc.Domain.Entities.ArtistMusicLabel", b =>
                {
                    b.HasOne("Disc.Domain.Entities.Artist", "Artist")
                        .WithMany("MusicLabel")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Disc.Domain.Entities.MusicLabel", "MusicLabel")
                        .WithMany("Artist")
                        .HasForeignKey("MusicLabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("MusicLabel");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Link", b =>
                {
                    b.HasOne("Disc.Domain.Entities.MusicLabel", null)
                        .WithMany("Links")
                        .HasForeignKey("MusicLabelLabelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Disc.Domain.Entities.MusicLabel", b =>
                {
                    b.HasOne("Disc.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Release", b =>
                {
                    b.HasOne("Disc.Domain.Entities.Artist", "Artist")
                        .WithMany("Release")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Disc.Domain.Entities.Condition", "Condition")
                        .WithMany("Release")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Disc.Domain.Entities.Country", "Country")
                        .WithMany("Release")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Disc.Domain.Entities.User", null)
                        .WithMany("Release")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Artist");

                    b.Navigation("Condition");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Disc.Domain.Entities.ReleaseGenre", b =>
                {
                    b.HasOne("Disc.Domain.Entities.Genre", "Genre")
                        .WithMany("ReleaseGenre")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Disc.Domain.Entities.Release", "Release")
                        .WithMany("ReleaseGenre")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("Disc.Domain.Entities.ReleaseStyle", b =>
                {
                    b.HasOne("Disc.Domain.Entities.Release", "Release")
                        .WithMany("ReleaseStyle")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Disc.Domain.Entities.Style", "Style")
                        .WithMany("ReleaseStyle")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Release");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Artist", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("MusicLabel");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Condition", b =>
                {
                    b.Navigation("Release");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Country", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Genre", b =>
                {
                    b.Navigation("ReleaseGenre");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Link", b =>
                {
                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Disc.Domain.Entities.MusicLabel", b =>
                {
                    b.Navigation("Artist");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Release", b =>
                {
                    b.Navigation("ReleaseGenre");

                    b.Navigation("ReleaseStyle");
                });

            modelBuilder.Entity("Disc.Domain.Entities.Style", b =>
                {
                    b.Navigation("ReleaseStyle");
                });

            modelBuilder.Entity("Disc.Domain.Entities.User", b =>
                {
                    b.Navigation("Release");
                });
#pragma warning restore 612, 618
        }
    }
}
